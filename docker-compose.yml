services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_SEGMENT_BYTES: 10000000

  redpanda-console:
    image: redpandadata/console:latest
    container_name: redpanda-console
    ports:
      - "8081:8080"
    environment:
      KAFKA_BROKERS: kafka:9092
    depends_on:
      - kafka

  postgres:
    image: debezium/postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    command: 
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_wal_senders=1"
      - "-c"
      - "max_replication_slots=1"    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/scripts:/docker-entrypoint-initdb.d

  debezium-connect:
    image: debezium/connect:2.4
    container_name: debezium-connect
    depends_on:
      - kafka
      - postgres
    ports:
      - "8083:8083"
    environment:
      GROUP_ID: 1
      BOOTSTRAP_SERVERS: kafka:9092
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_REST_ADVERTISED_HOST_NAME: debezium-connect
      CONNECT_REST_PORT: 8083
      CONNECT_CONFIG_PROVIDERS: file
      CONNECT_CONFIG_PROVIDERS_FILE_CLASS: org.apache.kafka.common.config.provider.FileConfigProvider
    volumes:
      - ./docker/debezium:/opt/kafka/connect/connectors
    command: >
      bash -c '
        /docker-entrypoint.sh start &
        echo "Waiting for Kafka Connect to start..."
        while [ $$(curl -s -o /dev/null -w %{http_code} http://localhost:8083/connectors) -ne 200 ] ; do 
          echo -n "."
          sleep 5
        done
        echo "Creating connector..."
        curl -X POST http://localhost:8083/connectors \
          -H "Content-Type: application/json" \
          -d @/opt/kafka/connect/connectors/postgres-connector.json
        echo "Connector created."
        wait
      '   

  debezium-ui:
    image: debezium/debezium-ui:2.4
    platform: linux/amd64
    container_name: debezium-ui
    ports:
      - "8084:8080"
    environment:
      KAFKA_CONNECT_URIS: http://debezium-connect:8083
    depends_on:
      - debezium-connect

  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile.dev
    container_name: api
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      KAFKA_BROKERS: kafka:9092
    depends_on:
      - kafka
    volumes:
      - ./apps/api:/usr/src/app
      - ./apps/api/node_modules:/usr/src/app/node_modules

  inventory:
    build:
      context: ./apps/inventory
      dockerfile: Dockerfile.dev
    container_name: inventory
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      KAFKA_BROKERS: kafka:9092
      POSTGRES_HOST: postgres
      POSTGRES_DB: mydb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT: 5432
    depends_on:
      - kafka
      - postgres
    volumes:
      - ./apps/inventory:/usr/src/app
      - ./apps/inventory/node_modules:/usr/src/app/node_modules

  monitor:
    build:
      context: ./apps/monitor
      dockerfile: Dockerfile.dev
    container_name: monitor
    ports:
      - "8080:8080"
      - "5005:5005" # Debug port for Java
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_DEVTOOLS_RESTART_ENABLED: "true"
      SPRING_DEVTOOLS_LIVERELOAD_ENABLED: "true"
    depends_on:
      - kafka
    volumes:
      - ./apps/monitor:/app

volumes:
  postgres_data:
